name: Terraform Deploy with CloudWatch Logging

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.2
  TF_WORKING_DIR: terraform

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init
      
      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
      
      - name: Send deployment logs to CloudWatch
        if: always()
        env:
          LOG_GROUP: ${{ secrets.LOG_GROUP }}
          LOG_STREAM: terraform-deploy-${{ github.run_id }}
        run: |
          #!/bin/bash
          set -e
          
          # Create log stream if it doesn't exist
          aws logs create-log-stream \
            --log-group-name "$LOG_GROUP" \
            --log-stream-name "$LOG_STREAM" 2>/dev/null || true
          
          # Prepare log message
          TIMESTAMP=$(date +%s000)
          STATUS="${{ job.status }}"
          COMMIT_SHA="${{ github.sha }}"
          ACTOR="${{ github.actor }}"
          
          LOG_MESSAGE=$(cat <<EOF
          {
            "deployment_status": "$STATUS",
            "commit_sha": "$COMMIT_SHA",
            "actor": "$ACTOR",
            "workflow_run_id": "${{ github.run_id }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          )
          
          # Get sequence token
          SEQUENCE_TOKEN=$(aws logs describe-log-streams \
            --log-group-name "$LOG_GROUP" \
            --log-stream-name "$LOG_STREAM" \
            --query 'logStreams[0].uploadSequenceToken' \
            --output text 2>/dev/null || echo "")
          
          # Send log event
          if [ -z "$SEQUENCE_TOKEN" ] || [ "$SEQUENCE_TOKEN" = "None" ]; then
            aws logs put-log-events \
              --log-group-name "$LOG_GROUP" \
              --log-stream-name "$LOG_STREAM" \
              --log-events timestamp=$TIMESTAMP,message="$LOG_MESSAGE"
          else
            aws logs put-log-events \
              --log-group-name "$LOG_GROUP" \
              --log-stream-name "$LOG_STREAM" \
              --log-events timestamp=$TIMESTAMP,message="$LOG_MESSAGE" \
              --sequence-token "$SEQUENCE_TOKEN"
          fi
          
          echo "âœ“ Logs sent to CloudWatch"