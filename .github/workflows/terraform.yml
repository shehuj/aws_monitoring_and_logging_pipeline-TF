name: 'Terraform: AWS Monitoring & Logging Pipeline'

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.2
  TF_WORKING_DIR: terraform

jobs:
  terraform:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out=tfplan
        continue-on-error: false

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/tfplan
          retention-days: 3

      - name: Terraform Apply (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: Terraform Outputs
        if: github.ref == 'refs/heads/main' && steps.apply.outcome == 'success'
        id: outputs
        run: |
          echo "Gathering Terraform outputs..."
          terraform output
          terraform output -json > ../tf_outputs.json
        continue-on-error: true

      - name: Publish Outputs to CloudWatch
        if: always()
        env:
          LOG_GROUP: ${{ secrets.CW_LOG_GROUP }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          TS=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
          STREAM="tf-run-${TS}"
          aws logs create-log-group --log-group-name "$LOG_GROUP" --region "$AWS_REGION" 2>/dev/null || true
          aws logs create-log-stream --log-group-name "$LOG_GROUP" --log-stream-name "$STREAM" --region "$AWS_REGION" 2>/dev/null || true
          MSG="Terraform workflow '${{ github.workflow }}' completed for '${{ github.ref_name }}' by '${{ github.actor }}' at $TS"
          EVENT_TIMESTAMP=$(date +%s000)
          LOG_JSON="[ { \"timestamp\": $EVENT_TIMESTAMP, \"message\": \"$MSG\" } ]"
          aws logs put-log-events \
            --log-group-name "$LOG_GROUP" \
            --log-stream-name "$STREAM" \
            --log-events "$LOG_JSON" \
            --region "$AWS_REGION" || echo "Failed to push CloudWatch logs"

      - name: Comment PR with Terraform Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `
            ### ðŸ§± Terraform Summary
            - **Format:** \`${{ steps.fmt.outcome }}\`
            - **Init:** \`${{ steps.init.outcome }}\`
            - **Validate:** \`${{ steps.validate.outcome }}\`
            - **Plan:** \`${{ steps.plan.outcome }}\`

            ðŸª£ **Artifacts:** Terraform plan uploaded to workflow artifacts.

            _Workflow:_ \`${{ github.workflow }}\`  
            _Branch:_ \`${{ github.ref_name }}\`  
            _Triggered by:_ @${{ github.actor }}
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });