name: Terraform Deploy with CloudWatch Logging

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: 1.6.2
  TF_WORKING_DIR: terraform
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  LOG_GROUP: ${{ secrets.CW_LOG_GROUP }}


jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init
      
      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
      
      - name: Send deployment logs to CloudWatch
        if: always()
        env:
          LOG_GROUP: ${{ env.LOG_GROUP }}
          LOG_STREAM: terraform-deploy-${{ github.run_id }}
        run: |
          #!/bin/bash
          set -e
          
          # Create log stream
          aws logs create-log-stream \
            --log-group-name "$LOG_GROUP" \
            --log-stream-name "$LOG_STREAM" 2>/dev/null || true
          
          # Create structured JSON with jq
          TIMESTAMP=$(date +%s000)
          
          LOG_MESSAGE=$(jq -n \
            --arg status "${{ job.status }}" \
            --arg sha "${{ github.sha }}" \
            --arg actor "${{ github.actor }}" \
            --arg run_id "${{ github.run_id }}" \
            --arg time "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            '{
              deployment_status: $status,
              commit_sha: $sha,
              actor: $actor,
              workflow_run_id: $run_id,
              timestamp: $time
            }' | jq -c .)
          
          # Create log events JSON
          LOG_EVENTS=$(jq -n \
            --arg timestamp "$TIMESTAMP" \
            --arg message "$LOG_MESSAGE" \
            '[{
              timestamp: ($timestamp | tonumber),
              message: $message
            }]')
          
          # Send to CloudWatch
          aws logs put-log-events \
            --log-group-name "$LOG_GROUP" \
            --log-stream-name "$LOG_STREAM" \
            --log-events "$LOG_EVENTS"
          
          echo "âœ“ Logs sent to CloudWatch"