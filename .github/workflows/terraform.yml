name: 'Deploy Static Web Server'

on:
  push:
    branches: [ main, dev]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request_target:
    branches: [ main, dev ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  CW_LOG_GROUP: ${{ secrets.CW_LOG_GROUP }} 

jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          echo "Initializing Terraform..."
          terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: |
          echo "Validating Terraform configuration..."
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          echo "Planning infrastructure changes..."
          terraform plan -input=false -out=tfplan
        continue-on-error: false

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 5
          if-no-files-found: error

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: |
          echo "Applying Terraform configuration..."
          terraform apply -input=false -auto-approve tfplan

      - name: Get Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.triggering_actor == 'captcloud01' && steps.apply.outcome == 'success' && github.action_status == 'completed'
        id: output
        run: |
          echo "Infrastructure outputs:"          
          terraform refresh
          terraform output
          terraform output aws_instance_ip
          echo "public_ip=$(terraform output -raw aws_instance_ip)" >> $GITHUB_OUTPUT

      - name: Test Web Server
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Testing web server..."
          echo "aws_instance_ip=$(terraform output -raw aws_instance_ip)"

          PUBLIC_IP=$(terraform output -raw aws_instance_ip)
          sleep 30
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${PUBLIC_IP} || echo "000")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Web server is responding (HTTP $HTTP_CODE)"
          else
            echo "Web server returned HTTP $HTTP_CODE"
          fi

      - name: CloudWatch Audit Logging
        if: always()
        env:
          LOG_GROUP: ${{ env.CW_LOG_GROUP }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          TS=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
          STREAM="run-${TS}"
          aws logs create-log-group --log-group-name "$LOG_GROUP" --region "$AWS_REGION" || true
          aws logs create-log-stream --log-group-name "$LOG_GROUP" --log-stream-name "$STREAM" --region "$AWS_REGION" || true
          MSG="Workflow ${{ github.workflow }} completed for ${GITHUB_REF} by ${{ github.actor }} at $TS"
          EVENT_TIMESTAMP=$(date +%s000)
          LOG_JSON="[ { \"timestamp\": $EVENT_TIMESTAMP, \"message\": \"$MSG\" } ]"
          aws logs put-log-events \
            --log-group-name "$LOG_GROUP" \
            --log-stream-name "$STREAM" \
            --log-events "$LOG_JSON" \
            --region "$AWS_REGION" || echo "Failed to put log event"

      - name: Comment PR with Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format ðŸ–Œ \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            Plan output available in Actions artifacts
            \`\`\`
            
            </details>
            
            *Workflow: \`${{ github.workflow }}\`*
            *Pushed by: @${{ github.actor }}*
            *Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });